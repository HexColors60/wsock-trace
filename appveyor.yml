version: 1.0.{build}

#
# Skipping commits affecting these files.
#
skip_commits:
   files:
    - '**/*.md'
    - '**/*.png'
    - '**/*.jpg'

environment:
  global:
    CL: -nologo -MP
  matrix:
    - BUILDER: msvc
      CPU:     x86
    - BUILDER: msvc
      CPU:     x64
    - BUILDER: mingw32
      CPU:     x86
    - BUILDER: mingw64
      CPU:     x64
    - BUILDER: cygwin32
      CPU:     x86
    - BUILDER: cygwin64
      CPU:     x64
    - BUILDER: watcom
      CPU:     x86

matrix:
  #
  # Immediately finish build if one of the above jobs fails.
  #
  fast_finish: true
  allow_failures:
     - BUILDER: watcom
       CPU:     x86
     - BUILDER: cygwin32
       CPU:     x86
     - BUILDER: cygwin64
       CPU:     x64

#
# Get better version string. Maybe output of "git describe --tags --long".
#
cache:
  - wsock-trace-{build}

install:
  #
  # clone the submodules.
  #
  - cmd: git submodule update --init --recursive

  #
  # Download IP2Location Database (with IPv4+IP6 addresses) and decompress using '7z'.
  #
  - cmd: curl -O -# http://www.watt-32.net/CI/IP46-COUNTRY.BIN.xz
  - cmd: 7z x IP46-COUNTRY.BIN.xz > NUL

  #
  # Add a few locations to our PATH.
  # And setup the compiler environment for Watcom
  # (it seems it cannot be done in 'appveyor-script.bat init')
  #
  - cmd: set WATCOM=%CD%\watcom
  - cmd: set PATH=%CD%\src;%WATCOM%\binnt;%PATH%
  - cmd: set NT_INCLUDE=%WATCOM%\h;%WATCOM%\h\nt
  - cmd: set DISABLEDELAYEDEXPANSION=0

  - cmd: if "%BUILDER%"=="mingw32"  set PATH=c:\msys64\MinGW32\bin;c:\msys64\usr\bin;%PATH%
  - cmd: if "%BUILDER%"=="mingw64"  set PATH=c:\msys64\MinGW64\bin;c:\msys64\usr\bin;%PATH%
  - cmd: if "%BUILDER%"=="cygwin64" set PATH=c:\msys64\usr\bin;%PATH%
  - cmd: if "%BUILDER%"=="cygwin32" c:\cygwin\setup-x86.exe -qgnNdO -l c:\cygwin\var\cache\setup -R c:\cygwin -s http://cygwin.mirror.constant.com & set PATH=c:\cygwin\bin;c:\msys64\usr\bin;%PATH%

  #
  # Set compiler environment for MSVC.
  #
  - cmd: if "%BUILDER%"=="msvc" call "c:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /%CPU%

build_script:
  - cmd: appveyor-script.bat init

  #
  # Download and extract OpenWatcom 2.0 using 'curl'
  #
  - cmd: if "%BUILDER%"=="watcom" (
            curl -O -# http://www.watt-32.net/CI/watcom20.zip &
            7z x -o%WATCOM% watcom20.zip > NUL)

  - cmd: cd src
  - cmd: set USE_LUA=1
  - cmd: set USE_IP2LOCATION=1
  - cmd: set PLATFORM=%CPU%
  - cmd: set CYGWIN=nodosfilewarning

  - cmd: if "%BUILDER%"=="msvc"     nmake -nologo -f Makefile.vc6
  - cmd: if "%BUILDER%"=="mingw32"  make          -f Makefile.MinGW
  - cmd: if "%BUILDER%"=="mingw64"  make          -f Makefile.MinGW
  - cmd: if "%BUILDER%"=="watcom"   wmake -h      -f Makefile.Watcom
  - cmd: if "%BUILDER%"=="cygwin32" (copy ..\wsock_trace.appveyor c:\Users\appveyor\AppData\Roaming\wsock_trace & make -f Makefile.CygWin)
  - cmd: if "%BUILDER%"=="cygwin64" (copy ..\wsock_trace.appveyor c:\Users\appveyor\AppData\Roaming\wsock_trace & make -f Makefile.CygWin)

test_script:
  - cmd: set WSOCK_TRACE_LEVEL=1 & test.exe
  - cmd: set WSOCK_TRACE_LEVEL=0 & chcp 865 & idna.exe           www.seoghør.no
  - cmd: set WSOCK_TRACE_LEVEL=0 &            idna.exe -c1252 -w www.seoghør.no
  - cmd: set WSOCK_TRACE_LEVEL=0 & geoip-test.bat
  - cmd: set WSOCK_TRACE_LEVEL=0 & geoip-test.bat --ip2loc_4
  - cmd: set WSOCK_TRACE_LEVEL=0 & geoip-test.bat --ip2loc_6
  - cmd: set WSOCK_TRACE_LEVEL=0 & set WSOCK_LUA_ENABLE=1 & test.exe WSAStartup WSACleanup

#
# Prevent the 'watcom' directory to end up in 'artifacts'.
# Create a .zip of the whole thing.
#
after_test:
  - cmd: cd c:\projects\wsock-trace
  - cmd: if "BUILDER"=="watcom" (echo Removing Watcom tree & del /S /Q watcom\* & rd watcom)
  - cmd: 7z a wsock_trace.zip src\*.dll src\*.dll src\*.lib src\*.a src\*.exe src\*.c src\*.h src\*.lua > NUL
  - cmd: 7z a wsock_trace.zip .\wsock_trace .\geoip .\geoip6 .\drop.txt .\dropv6.txt .\edrop.txt        > NUL

artifacts:
  #
  # Push the .zip-file as an artifact.
  #
  - path: wsock_trace.zip
    name: Wsock-Trace

#
# One day...
#
# deploy:
#   Deploying to NuGet feed
#   - provider: NuGet
#     server: https://my.nuget.server/feed
#     api_key:
#       secure: FYWX6NfjZIVw==
#     skip_symbols: false
#     symbol_server: https://your.symbol.server/feed
#     artifact: MyPackage.nupkg

#
#   Deploy to GitHub Releases
#
#   - provider: GitHub
#     artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#     draft: false
#     prerelease: false
#     on:
#       branch: master                # release from master branch only
#       appveyor_repo_tag: true       # deploy on tag push only
