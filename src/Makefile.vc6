#
# Wsock-trace makefile for MSVC6+
# G. Vanem <gvanem@yahoo.no> 2017.
#
# Usage:
# Open a "MSVC Developer Command Prompt" and set the compiler
# environment:
#
#     "%VSINSTALLDIR%VC\vcvarsall.bat" x86
#   -or-
#     "%VSINSTALLDIR%VC\vcvarsall.bat" x64
#
# Then cd to this directory and run this makefile.

USE_CRT_DEBUG = 0
USE_DEF_FILE  = 1

#
# The IP2Location library:
#   https://github.com/chrislim2888/IP2Location-C-Library
#
# You can also add '$(IP2LOCATION_ROOT)/libIP2Location' to your
# '%INCLUDE%' variable instead of setting it here.
#
# Default value is 1.
#
!if "$(USE_IP2LOCATION)" == ""
USE_IP2LOCATION = 1
!endif

!if "$(IP2LOCATION_ROOT)" == ""
IP2LOCATION_ROOT = ..\IP2Location-C-Library
!endif

#
# If you want Lua-script support, change these:
#
# Default value is 0.
#
!if "$(USE_LUA)" == ""
USE_LUA = 0
!endif

!if "$(LUAJIT_ROOT)" == ""
LUAJIT_ROOT = ..\LuaJIT
!endif

# Execute "%VSINSTALLDIR%VC\vcvarsall.bat" x64 (with quotes) inside a MSVC
# Developer Command Prompt or set '%CPU%=x64' to build a 64-bit version.
# 64-bit builds have a '_x64' suffix on DLL and lib.
#
!if "$(PLATFORM)" == "x64" || "$(CPU)" == "x64"
X_SUFFIX   = _x64
MACHINE    = x64
BITNESS    = 64
LIB_TARGET = $(VCINSTALLDIR)lib\x64
BIN_TARGET = $(VCINSTALLDIR)bin\x64
!else
MACHINE    = x86
BITNESS    = 32
LIB_TARGET = $(VCINSTALLDIR)lib
BIN_TARGET = $(VCINSTALLDIR)bin
!endif

#
# Configurations:
#  -MD   - msvcrt1*.dll,  threads, release (normal)
#  -MDd  - msvcrt1*d.dll, threads, debug
#  -ML   - libc, no threads,  release (not available on VC-2008+)
#  -MLd  - libc, no threads,  debug   (not available on VC-2008+)
#  -MT   - libc, threads,     release
#  -MTd  - libc, threads,     debug

CC      = cl
CFLAGS  = -nologo -I. -W3 -Zi -DWIN32 -DWIN32_LEAN_AND_MEAN -D_WIN32_WINNT=0x0600 # -GS -RTC1 -RTCu -D_DEBUG
LDFLAGS = -nologo -map -debug -verbose -incremental:no -subsystem:console         # -debugtype:cv -fixed:no
LDFLAGS = $(LDFLAGS) -machine:$(MACHINE)

OBJ_DIR = MSVC_obj$(X_SUFFIX)

!if "$(USE_CRT_DEBUG)" == "1"
CFLAGS = $(CFLAGS) -MDd -Os -D_DEBUG
!else
CFLAGS = $(CFLAGS) -MD -Ot -Gs # -DNDEBUG
!endif

!if "$(USE_DEF_FILE)" == "1"
CFLAGS      = $(CFLAGS) -DUSE_DEF_FILE
WSOCK_DEF   = wsock_trace$(X_SUFFIX).def
LDFLAGS_DEF = -def:$(WSOCK_DEF)
!endif

!if "$(USE_LUA)" == "1"
CFLAGS = $(CFLAGS) -I$(LUAJIT_ROOT)/src -DUSE_LUA
EX_LIBS = $(LUAJIT_ROOT)/src/lua51_static.lib
!endif

!if "$(USE_IP2LOCATION)" == "1"
CFLAGS = $(CFLAGS) -I$(IP2LOCATION_ROOT)/libIP2Location -DUSE_IP2LOCATION
!endif

EX_LIBS = $(EX_LIBS) ole32.lib

#
# The 'wsock_trace{_x64}.lib' is an import-lib for 'wsock_trace{_x64}.dll'.
# Since the SDK header <ws2ipdef.h> declares some data with no export
# declaration ('in6addr_any' etc.), the non-export.obj is simply added to this
# imp-lib.
#
WSOCK_LIB = wsock_trace$(X_SUFFIX).lib
WSOCK_DLL = wsock_trace$(X_SUFFIX).dll
WSOCK_MAP = wsock_trace$(X_SUFFIX).map

CFLAGS = $(CFLAGS) -D_CRT_SECURE_NO_WARNINGS

OBJECTS = $(OBJ_DIR)\common.obj          \
          $(OBJ_DIR)\cpu.obj             \
          $(OBJ_DIR)\dump.obj            \
          $(OBJ_DIR)\hosts.obj           \
          $(OBJ_DIR)\geoip.obj           \
          $(OBJ_DIR)\geoip-gen4.obj      \
          $(OBJ_DIR)\geoip-gen6.obj      \
          $(OBJ_DIR)\idna.obj            \
          $(OBJ_DIR)\ip2loc.obj          \
          $(OBJ_DIR)\init.obj            \
          $(OBJ_DIR)\in_addr.obj         \
          $(OBJ_DIR)\overlap.obj         \
          $(OBJ_DIR)\smartlist.obj       \
          $(OBJ_DIR)\stkwalk.obj         \
          $(OBJ_DIR)\vm_dump.obj         \
          $(OBJ_DIR)\wsock_trace_lua.obj \
          $(OBJ_DIR)\wsock_trace.obj     \
          $(OBJ_DIR)\wsock_trace.res

NON_EXPORT_OBJ = $(OBJ_DIR)\non-export.obj

GEOIP_SRC = geoip.c common.c idna.c init.c in_addr.c ip2loc.c getopt.c smartlist.c
GEOIP_OBJ = $(GEOIP_SRC:.c=.obj)

all: $(OBJ_DIR) compile_luajit_$(USE_LUA) $(WSOCK_DLL) $(WSOCK_LIB) test.exe idna.exe
	@echo Welcome to Wsock_trace $(MACHINE) library and example.

$(OBJ_DIR):
	mkdir $(OBJ_DIR)

$(WSOCK_DLL) $(WSOCK_LIB): $(WSOCK_DEF) $(OBJECTS) $(NON_EXPORT_OBJ)
	link -dll $(LDFLAGS) -implib:$(WSOCK_LIB) -out:$(WSOCK_DLL) $(LDFLAGS_DEF) $(OBJECTS) $(EX_LIBS) > link.tmp
	lib -nologo $(WSOCK_LIB) $(NON_EXPORT_OBJ)
	@type link.tmp >> $(WSOCK_MAP)
	@del $(WSOCK_LIB:.lib=.exp)

install: all
	copy $(WSOCK_LIB)               "$(LIB_TARGET)"
	copy $(WSOCK_DLL)               "$(BIN_TARGET)"
	copy wsock_trace$(X_SUFFIX).pdb "$(BIN_TARGET)"

uninstall:
	-del "$(LIB_TARGET)\$(WSOCK_LIB)"
	-del "$(BIN_TARGET)\$(WSOCK_DLL)"

geoip-gen4.c geoip-gen6.c: geoip.exe

test.exe: $(OBJ_DIR)\test.obj $(OBJ_DIR)\getopt.obj $(WSOCK_LIB)
	link $(LDFLAGS) -out:$@ -pdb:$*.pdb $** > link.tmp
	type link.tmp >> test.map

geoip.exe: $(GEOIP_SRC) geoip-null.c
	$(CC) $(CFLAGS) -DTEST_GEOIP $** -Fe$@ -link $(LDFLAGS) ws2_32.lib ole32.lib > link.tmp
	type link.tmp >> geoip.map
	geoip.exe -4g geoip-gen4.c
	geoip.exe -6g geoip-gen6.c
	$(CC) -c $(CFLAGS) geoip-gen4.c geoip-gen6.c
	link $(LDFLAGS) -out:$@ $(GEOIP_OBJ) geoip-gen4.obj geoip-gen6.obj ws2_32.lib ole32.lib > link.tmp
	del $(GEOIP_OBJ)

idna.exe: $(OBJ_DIR)\idna2.obj $(OBJ_DIR)\getopt.obj $(OBJ_DIR)\common.obj $(OBJ_DIR)\smartlist.obj $(WSOCK_LIB)
	link $(LDFLAGS) -out:$@ -pdb:$*.pdb $** ole32.lib > link.tmp
	type link.tmp >> idna.map

run_test: test.exe
	test.exe -dd

compile_luajit_0:
	@echo

compile_luajit_1:
	pushd $(LUAJIT_ROOT)\src      &    \
	if not exist lua51_static.lib (    \
	   msvcbuild.bat debug static &    \
	   copy lua51.lib lua51_static.lib )

clean:
	-del link.tmp vc1*.pdb geoip-null.obj geoip-gen4.obj geoip-gen6.obj $(OBJ_DIR)\*.obj \
	     $(OBJ_DIR)\wsock_trace.res test.map test.lib wsock_trace.appveyor

vclean realclean: clean
	-del wsock_trace.lib     wsock_trace.dll     wsock_trace.map     wsock_trace.pdb
	-del wsock_trace_x64.lib wsock_trace_x64.dll wsock_trace_x64.map wsock_trace_x64.pdb
	-del geoip.exe geoip.map geoip.pdb geoip-gen4.c geoip-gen6.c
	-del idna.exe  idna.map  idna.pdb  test.exe     test.pdb
	-rd $(OBJ_DIR)

help:
	@type <<
Run one of the following commands:
  nmake -f Makefile.vc6 VAR=VAL
  nmake -f Makefile.vc6 install VAR=VAL

where VAR can be of the following:
  USE_CRT_DEBUG    (default: $(USE_CRT_DEBUG))
  USE_DEF_FILE     (default: $(USE_DEF_FILE))
  USE_IP2LOCATION  (default: $(USE_IP2LOCATION))
  IP2LOCATION_ROOT (default: $(IP2LOCATION_ROOT))
  USE_LUA          (default: $(USE_LUA))
  LUAJIT_ROOT      (default: $(LUAJIT_ROOT))
  CPU              (default: $(CPU))
  LIB_TARGET       (default: $(LIB_TARGET))
  BIN_TARGET       (default: $(BIN_TARGET))
<< NOKEEP

$(OBJ_DIR)\wsock_trace.res: wsock_trace.rc
	rc -nologo -DDEBUG=$(USE_CRT_DEBUG) -DBITNESS=$(BITNESS) -D_MSC_VER -Fo $(OBJ_DIR)\wsock_trace.res wsock_trace.rc


#
# Test that 'fastcall' functions (-Gr) can be mixed in and decoded by stkwalk.c.
#
$(OBJ_DIR)\test.obj: test.c
	$(CC) $(CFLAGS) -Gr -Fo$*.obj -c test.c

$(OBJ_DIR)\idna2.obj: idna.c
	$(CC) $(CFLAGS) -DTEST_IDNA -Fo$*.obj -c idna.c

.c{$(OBJ_DIR)}.obj:
	$(CC) $(CFLAGS) -Fo$*.obj -c $<

#
# Make a .def file for x64; remove the leading '_' and the
# '@x' suffixes.
#
wsock_trace_x64.def: wsock_trace.def Makefile.VC6
	echo ; This file has been generated by Makefile.vc6. DO NOT EDIT! > wsock_trace_x64.def
	echo ;                                                           >> wsock_trace_x64.def
	sed -e "s/LIBRARY wsock_trace.dll/LIBRARY wsock_trace_x64.dll/"  \
	    -e "s/_\(.*\)@.*/\1/g" < wsock_trace.def                     >> wsock_trace_x64.def

common.h:                   wsock_defs.h
$(OBJ_DIR)\common.obj:      common.c common.h smartlist.h init.h dump.h wsock_trace.rc
$(OBJ_DIR)\cpu.obj:         cpu.c common.h init.h cpu.h
$(OBJ_DIR)\dump.obj:        dump.c common.h in_addr.h init.h geoip.h smartlist.h \
                            idna.h hosts.h wsock_trace.h dump.h
$(OBJ_DIR)\hosts.obj:       hosts.c common.h init.h smartlist.h in_addr.h hosts.h
$(OBJ_DIR)\geoip.obj:       geoip.c common.h smartlist.h init.h in_addr.h geoip.h
$(OBJ_DIR)\geoip-gen4.obj:  geoip-gen4.c geoip.h common.h smartlist.h
$(OBJ_DIR)\geoip-gen6.obj:  geoip-gen6.c geoip.h common.h smartlist.h
$(OBJ_DIR)\idna.obj:        idna.c common.h init.h smartlist.h idna.h
$(OBJ_DIR)\init.obj:        init.c common.h wsock_trace.h wsock_trace_lua.h \
                            dump.h geoip.h smartlist.h idna.h stkwalk.h \
                            overlap.h hosts.h cpu.h init.h
$(OBJ_DIR)\in_addr.obj:     in_addr.c common.h in_addr.h
$(OBJ_DIR)\overlap.obj:     overlap.c common.h init.h smartlist.h overlap.h
$(OBJ_DIR)\smartlist.obj:   smartlist.c common.h vm_dump.h smartlist.h
$(OBJ_DIR)\stkwalk.obj:     stkwalk.c common.h init.h stkwalk.h smartlist.h
$(OBJ_DIR)\test.obj:        test.c getopt.h wsock_defs.h
$(OBJ_DIR)\vm_dump.obj:     vm_dump.c common.h cpu.h vm_dump.h
$(OBJ_DIR)\wsock_trace.obj: wsock_trace.c common.h in_addr.h \
                            init.h cpu.h stkwalk.h smartlist.h \
                            overlap.h dump.h wsock_trace_lua.h \
                            wsock_trace.h ws_hooks.c

!if "$(USE_IP2LOCATION)" == "1"
$(OBJ_DIR)\ip2loc.obj:      ip2loc.c common.h init.h geoip.h smartlist.h \
                            $(IP2LOCATION_ROOT)/libIP2Location/IP2Location.h \
                            $(IP2LOCATION_ROOT)/libIP2Location/IP2Loc_DBInterface.h in_addr.h \
                            $(IP2LOCATION_ROOT)/libIP2Location/IP2Location.c \
                            $(IP2LOCATION_ROOT)/libIP2Location/IP2Location.h \
                            $(IP2LOCATION_ROOT)/libIP2Location/IP2Loc_DBInterface.c
!else
$(OBJ_DIR)\ip2loc.obj:      ip2loc.c common.h init.h geoip.h smartlist.h
!endif

!if "$(USE_LUA)" == "1"
wsock_trace_lua.h: $(LUAJIT_ROOT)/src/lua.h     \
                   $(LUAJIT_ROOT)/src/luaconf.h \
                   $(LUAJIT_ROOT)/src/lualib.h  \
                   $(LUAJIT_ROOT)/src/lua.h     \
                   $(LUAJIT_ROOT)/src/lauxlib.h
!endif
